generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider = "mongodb"
    // url      = "mongodb+srv://giaphongngo:YIq4BRe7bVAmxNy7@databasedamh.acc9voi.mongodb.net/databasedamh?retryWrites=true&w=majority"
    url      = "mongodb+srv://giaphongngo:YIq4BRe7bVAmxNy7@chatapp.wjikhdw.mongodb.net/chatapp?retryWrites=true&w=majority"
}

model User {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    email String  @unique
    username String
    password String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner connectedFriend[] @relation("owner")
    friends connectedFriend[] @relation("friends")
    messages Message[]
    sender friendRequest[] @relation("sender")
    receiver friendRequest[] @relation("receiver")
    user1Room Room[] @relation("user1Room")
    user2Room Room[] @relation("user2Room")
}
model connectedFriend {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    friendId String 
    friend User @relation(fields: [friendId], references: [id], onUpdate: Cascade, name: "friends")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User    @relation(fields: [userId], references: [id], onUpdate: Cascade, name : "owner")
    userId String
}
model friendRequest {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    senderId String
    sender User    @relation(fields: [senderId], onUpdate: Cascade, references: [id], name : "sender")
    receiverId String
    receiver User    @relation(fields: [receiverId], onUpdate: Cascade, references: [id], name : "receiver")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Message {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User    @relation(fields: [userId], references: [id])
    userId String
    room Room @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    roomId String
}
model Room {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user1 User    @relation(fields: [user1Id], references: [id], name : "user1Room")
    user1Id String
    user2 User    @relation(fields: [user2Id], references: [id], name : "user2Room")
    user2Id String
    messages Message[]
}